#!/bin/bash
# Simple postBuild that doesn't timeout

echo "Setting up EOPF-Zarr environment for MyBinder..."

# Create directories
mkdir -p /home/jovyan/eopf-zarr/drivers

# Set environment variables
echo 'export GDAL_DRIVER_PATH="/home/jovyan/eopf-zarr/drivers"' >> ~/.bashrc

# Try to build driver (with timeout protection)
echo "Attempting to build EOPF-Zarr driver (may timeout, that's OK)..."

# Clone with timeout
timeout 60 git clone https://github.com/EOPF-Sample-Service/GDAL-ZARR-EOPF.git /tmp/eopf-source || echo "Clone timed out or failed"

if [ -d "/tmp/eopf-source" ]; then
    cd /home/jovyan/eopf-zarr
    mkdir -p build
    cd build
    
    # Build with timeout
    if timeout 120 cmake /tmp/eopf-source && timeout 180 make -j2; then
        if [ -f "gdal_EOPFZarr.so" ]; then
            cp gdal_EOPFZarr.so ../drivers/
            echo "✅ EOPF-Zarr driver built successfully!"
        fi
    else
        echo "⚠️ Driver build timed out - will use standard GDAL"
    fi
fi

# Create test notebook regardless of build status
cat > /home/jovyan/test_eopf_environment.ipynb << 'EOF'
{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": ["# EOPF-Zarr Environment Test\n\nThis notebook tests the MyBinder environment setup."]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import os\n",
    "import sys\n",
    "print(f'Python: {sys.version}')\n",
    "print(f'Working directory: {os.getcwd()}')\n",
    "\n",
    "# Set environment variables\n",
    "os.environ['GDAL_DRIVER_PATH'] = '/home/jovyan/eopf-zarr/drivers'\n",
    "print(f'GDAL_DRIVER_PATH: {os.environ.get(\"GDAL_DRIVER_PATH\")}')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Test GDAL\n",
    "try:\n",
    "    from osgeo import gdal\n",
    "    gdal.AllRegister()\n",
    "    print(f'✅ GDAL {gdal.VersionInfo()} loaded with {gdal.GetDriverCount()} drivers')\n",
    "    \n",
    "    # Check for EOPF driver\n",
    "    if os.path.exists('/home/jovyan/eopf-zarr/drivers/gdal_EOPFZarr.so'):\n",
    "        print('✅ EOPF-Zarr driver file found')\n",
    "        driver = gdal.GetDriverByName('EOPFZARR')\n",
    "        if driver:\n",
    "            print(f'✅ EOPF-Zarr driver loaded: {driver.GetDescription()}')\n",
    "        else:\n",
    "            print('⚠️ EOPF-Zarr driver file exists but not loaded by GDAL')\n",
    "    else:\n",
    "        print('⚠️ EOPF-Zarr driver not built - using standard GDAL drivers')\n",
    "        \n",
    "except Exception as e:\n",
    "    print(f'❌ Error: {e}')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Test other packages\n",
    "packages = ['numpy', 'xarray', 'zarr', 'matplotlib']\n",
    "for pkg in packages:\n",
    "    try:\n",
    "        __import__(pkg)\n",
    "        print(f'✅ {pkg}')\n",
    "    except ImportError:\n",
    "        print(f'❌ {pkg}')"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {"display_name": "Python 3", "language": "python", "name": "python3"}
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
EOF

echo "✅ MyBinder setup complete!"
echo "📝 Test notebook: /home/jovyan/test_eopf_environment.ipynb"
