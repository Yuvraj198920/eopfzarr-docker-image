#!/bin/bash
set -euo pipefail

# Post-build script for mybinder.org
# This script runs after the conda environment is set up

echo "🔧 Running post-build setup for EOPF-Zarr driver..."

# Ensure GDAL environment variables are set
export GDAL_DRIVER_PATH="/opt/eopf-zarr/drivers"
export GDAL_DATA="/usr/share/gdal" 
export PROJ_LIB="/usr/share/proj"

# Verify the driver file exists
if [ -f "/opt/eopf-zarr/drivers/gdal_EOPFZarr.so" ]; then
    echo "✅ EOPF-Zarr driver file found at /opt/eopf-zarr/drivers/gdal_EOPFZarr.so"
    ls -la /opt/eopf-zarr/drivers/
else
    echo "❌ EOPF-Zarr driver file NOT found!"
    exit 1
fi

# Test GDAL and driver loading
echo "🧪 Testing GDAL and driver registration..."
python3 -c "
import os
os.environ['GDAL_DRIVER_PATH'] = '/opt/eopf-zarr/drivers'
os.environ['GDAL_DATA'] = '/usr/share/gdal'
os.environ['PROJ_LIB'] = '/usr/share/proj'

try:
    from osgeo import gdal
    gdal.AllRegister()
    print(f'✅ GDAL {gdal.VersionInfo()} loaded successfully')
    print(f'📦 Total drivers available: {gdal.GetDriverCount()}')
    
    # Try to find the EOPF-Zarr driver
    driver = gdal.GetDriverByName('EOPFZARR')
    if driver:
        print(f'✅ EOPF-Zarr driver found: {driver.GetDescription()}')
    else:
        print('⚠️ EOPF-Zarr driver not found by name, but may be loaded as generic driver')
        
    # List some available drivers
    print('📋 Available drivers (first 10):')
    for i in range(min(10, gdal.GetDriverCount())):
        driver = gdal.GetDriver(i)
        print(f'  - {driver.GetDescription()}')
        
except Exception as e:
    print(f'❌ Error: {e}')
    exit(1)
"

# Set up permanent environment variables for the user
echo "🔧 Setting up environment variables..."
echo 'export GDAL_DRIVER_PATH="/opt/eopf-zarr/drivers"' >> ${HOME}/.profile
echo 'export GDAL_DATA="/usr/share/gdal"' >> ${HOME}/.profile
echo 'export PROJ_LIB="/usr/share/proj"' >> ${HOME}/.profile

# Create a notebook to test the driver
echo "📝 Creating test notebook..."
mkdir -p ${HOME}/examples
cat > ${HOME}/examples/test_eopf_driver.ipynb << 'EOF'
{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# EOPF-Zarr Driver Test\n",
    "\n",
    "This notebook tests the EOPF-Zarr GDAL driver installation."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import os\n",
    "import sys\n",
    "\n",
    "# Set environment variables\n",
    "os.environ['GDAL_DRIVER_PATH'] = '/opt/eopf-zarr/drivers'\n",
    "os.environ['GDAL_DATA'] = '/usr/share/gdal'\n",
    "os.environ['PROJ_LIB'] = '/usr/share/proj'\n",
    "\n",
    "print(f\"Python version: {sys.version}\")\n",
    "print(f\"GDAL_DRIVER_PATH: {os.environ.get('GDAL_DRIVER_PATH')}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Test GDAL installation\n",
    "try:\n",
    "    from osgeo import gdal\n",
    "    gdal.AllRegister()\n",
    "    print(f\"✅ GDAL {gdal.VersionInfo()} loaded successfully\")\n",
    "    print(f\"📦 Total drivers available: {gdal.GetDriverCount()}\")\n",
    "except ImportError as e:\n",
    "    print(f\"❌ Failed to import GDAL: {e}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Test EOPF-Zarr driver\n",
    "try:\n",
    "    driver = gdal.GetDriverByName('EOPFZARR')\n",
    "    if driver:\n",
    "        print(f\"✅ EOPF-Zarr driver found: {driver.GetDescription()}\")\n",
    "        print(f\"   Metadata: {driver.GetMetadata()}\")\n",
    "    else:\n",
    "        print(\"⚠️ EOPF-Zarr driver not found by name\")\n",
    "        print(\"Checking if driver is loaded...\")\n",
    "        \n",
    "        # List all drivers to see if it's there\n",
    "        for i in range(gdal.GetDriverCount()):\n",
    "            drv = gdal.GetDriver(i)\n",
    "            if 'eopf' in drv.GetDescription().lower() or 'zarr' in drv.GetDescription().lower():\n",
    "                print(f\"Found related driver: {drv.GetDescription()}\")\n",
    "except Exception as e:\n",
    "    print(f\"❌ Error checking driver: {e}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Run the test environment script\n",
    "import subprocess\n",
    "result = subprocess.run(['/usr/local/bin/test-environment.py'], capture_output=True, text=True)\n",
    "print(result.stdout)\n",
    "if result.stderr:\n",
    "    print(\"Errors:\")\n",
    "    print(result.stderr)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
EOF

echo "✅ Post-build setup completed successfully!"
echo "📝 Test notebook created at: ${HOME}/examples/test_eopf_driver.ipynb"
echo "🚀 Ready to test EOPF-Zarr driver in mybinder!"
