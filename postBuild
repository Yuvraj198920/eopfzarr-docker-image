#!/bin/bash
# Optimized postBuild for EOPF-Zarr driver in MyBinder (using pre-built artifacts)

set -euo pipefail

echo "🚀 Setting up EOPF-Zarr driver environment for MyBinder..."

# Set CONDA_PREFIX if not set (for Docker builds)
if [ -z "${CONDA_PREFIX:-}" ]; then
    # Try common conda locations
    if [ -d "/srv/conda/envs/notebook" ]; then
        export CONDA_PREFIX="/srv/conda/envs/notebook"
    elif [ -d "/opt/conda" ]; then
        export CONDA_PREFIX="/opt/conda"
    elif [ -d "/srv/conda" ]; then
        export CONDA_PREFIX="/srv/conda"
    else
        export CONDA_PREFIX="/usr/local"
    fi
    echo "🔧 Set CONDA_PREFIX to: $CONDA_PREFIX"
fi

# Create directories
mkdir -p /home/jovyan/eopf-zarr/drivers

# Set environment variables permanently
echo 'export GDAL_DRIVER_PATH="/home/jovyan/eopf-zarr/drivers"' >> ~/.bashrc
echo 'export GDAL_DATA="${CONDA_PREFIX:-/usr/local}/share/gdal"' >> ~/.bashrc
echo 'export PROJ_LIB="${CONDA_PREFIX:-/usr/local}/share/proj"' >> ~/.bashrc

# Also set for current session
export GDAL_DRIVER_PATH="/home/jovyan/eopf-zarr/drivers"
export GDAL_DATA="${CONDA_PREFIX}/share/gdal"
export PROJ_LIB="${CONDA_PREFIX}/share/proj"

echo "📁 Environment variables set:"
echo "  GDAL_DRIVER_PATH: $GDAL_DRIVER_PATH"
echo "  GDAL_DATA: $GDAL_DATA"
echo "  PROJ_LIB: $PROJ_LIB"
echo "  CONDA_PREFIX: $CONDA_PREFIX"

# Smart EOPF-Zarr driver acquisition (pre-built artifacts approach)
echo "📦 Acquiring EOPF-Zarr driver (optimized for MyBinder)..."

cd /home/jovyan/eopf-zarr

# Method 1: Try to get a pre-built artifact from a known working build
echo "🔍 Attempting to use pre-built driver artifacts..."

# Since GitHub Actions artifacts require authentication, we'll use a hybrid approach:
# 1. Try to find any releases with binaries
# 2. Fall back to minimal source build with optimizations

# Check GitHub releases for any binary artifacts
echo "🌐 Checking GitHub releases..."
if curl -sL "https://api.github.com/repos/EOPF-Sample-Service/GDAL-ZARR-EOPF/releases/latest" | grep -q '"tag_name"'; then
    echo "📦 Releases found, checking for binary downloads..."
    
    # Look for any .so files in releases
    DOWNLOAD_URL=$(curl -sL "https://api.github.com/repos/EOPF-Sample-Service/GDAL-ZARR-EOPF/releases/latest" | \
                   grep -o '"browser_download_url": "[^"]*\.so"' | \
                   grep -o 'https://[^"]*' | head -1)
    
    if [ -n "$DOWNLOAD_URL" ]; then
        echo "🎉 Found pre-built driver in releases!"
        echo "⬇️ Downloading: $DOWNLOAD_URL"
        if wget -O drivers/gdal_EOPFZarr.so "$DOWNLOAD_URL"; then
            chmod 755 drivers/gdal_EOPFZarr.so
            echo "✅ Successfully downloaded pre-built driver!"
        else
            echo "⚠️ Download failed, falling back to build method"
            DOWNLOAD_URL=""
        fi
    else
        echo "ℹ️ No .so files found in releases"
    fi
else
    echo "ℹ️ No releases available"
    DOWNLOAD_URL=""
fi

# Method 2: If no pre-built artifact, do optimized minimal build
if [ -z "$DOWNLOAD_URL" ] || [ ! -f "drivers/gdal_EOPFZarr.so" ]; then
    echo "🔨 Building from source (optimized for speed)..."
    
    # Clone source with minimal depth
    if git clone --depth 1 https://github.com/EOPF-Sample-Service/GDAL-ZARR-EOPF.git source; then
        echo "✅ Source cloned successfully"
        
        cd source
        mkdir -p build_fast
        cd build_fast
        
        echo "⚙️ Quick CMake configuration for GDAL 3.8+..."
        
        # Fast build configuration
        if cmake .. \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_PREFIX_PATH="$CONDA_PREFIX" \
            -DCMAKE_CXX_FLAGS="-O2 -DNDEBUG -march=native" \
            -DCMAKE_VERBOSE_MAKEFILE=OFF \
            -DCMAKE_INSTALL_PREFIX=/home/jovyan/eopf-zarr; then
            
            echo "🚀 Fast parallel build..."
            if make -j$(nproc) --silent; then
                echo "✅ Build completed successfully!"
                
                # Install the driver
                if [ -f "gdal_EOPFZarr.so" ]; then
                    cp gdal_EOPFZarr.so ../../drivers/
                    chmod 755 ../../drivers/gdal_EOPFZarr.so
                    echo "✅ Driver installed successfully!"
                else
                    echo "⚠️ Expected driver binary not found, checking alternatives..."
                    # Look for any .so files that might be the driver
                    find . -name "*.so" -type f | head -3
                    if find . -name "*.so" -type f | grep -q .; then
                        echo "📁 Found alternative .so files, trying first one..."
                        find . -name "*.so" -type f | head -1 | xargs -I {} cp {} ../../drivers/gdal_EOPFZarr.so
                        chmod 755 ../../drivers/gdal_EOPFZarr.so
                    fi
                fi
            else
                echo "❌ Build failed - checking error details..."
                echo "ℹ️ GDAL version:"
                gdal-config --version 2>/dev/null || echo "  gdal-config not available"
                echo "ℹ️ CMAKE version:"
                cmake --version | head -1
            fi
        else
            echo "❌ CMake configuration failed"
            echo "ℹ️ Possible causes: missing dependencies, GDAL compatibility issues"
        fi
        
        # Cleanup to save space
        cd /home/jovyan/eopf-zarr
        rm -rf source
        
    else
        echo "❌ Failed to clone source repository"
        echo "⚠️ Check network connectivity"
    fi
fi

# Final verification and summary
echo ""
echo "🔍 Installation Summary:"
if [ -f "drivers/gdal_EOPFZarr.so" ]; then
    echo "🎉 EOPF-Zarr driver successfully installed!"
    echo "📁 Location: /home/jovyan/eopf-zarr/drivers/gdal_EOPFZarr.so"
    echo "📊 Size: $(ls -lh drivers/gdal_EOPFZarr.so | awk '{print $5}')"
    echo "🔧 Permissions: $(ls -la drivers/gdal_EOPFZarr.so | awk '{print $1}')"
    echo "✅ Ready for GDAL to load automatically"
else
    echo "⚠️ Driver installation incomplete"
    echo "📂 Contents of drivers directory:"
    ls -la drivers/ 2>/dev/null || echo "  (directory empty)"
    
    echo ""
    echo "🔧 Troubleshooting info:"
    echo "  📦 GDAL version: $(gdal-config --version 2>/dev/null || echo 'unknown')"
    echo "  🐍 Python GDAL: $(python -c 'from osgeo import gdal; print(gdal.VersionInfo())' 2>/dev/null || echo 'not available')"
    echo "  📁 GDAL drivers path: $GDAL_DRIVER_PATH"
fi

# Create test notebook for validation
echo ""
echo "📓 Creating test notebook..."

cat > /home/jovyan/test_eopf_driver.ipynb << 'EOF'
{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# EOPF-Zarr Driver Test - MyBinder Edition\n",
    "\n",
    "This notebook validates the EOPF-Zarr GDAL driver installation."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import os\n",
    "import sys\n",
    "print(f'🐍 Python: {sys.version}')\n",
    "print(f'📁 Working directory: {os.getcwd()}')\n",
    "\n",
    "# Set environment variables\n",
    "os.environ['GDAL_DRIVER_PATH'] = '/home/jovyan/eopf-zarr/drivers'\n",
    "os.environ['GDAL_DATA'] = os.path.join(os.environ.get('CONDA_PREFIX', ''), 'share', 'gdal')\n",
    "os.environ['PROJ_LIB'] = os.path.join(os.environ.get('CONDA_PREFIX', ''), 'share', 'proj')\n",
    "\n",
    "print(f'\\n🔧 Environment Variables:')\n",
    "for var in ['GDAL_DRIVER_PATH', 'GDAL_DATA', 'PROJ_LIB', 'CONDA_PREFIX']:\n",
    "    print(f'  {var}: {os.environ.get(var, \"not set\")}')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Check driver file\n",
    "import os\n",
    "driver_file = '/home/jovyan/eopf-zarr/drivers/gdal_EOPFZarr.so'\n",
    "print(f'📁 Checking driver: {driver_file}')\n",
    "\n",
    "if os.path.exists(driver_file):\n",
    "    stat = os.stat(driver_file)\n",
    "    print(f'✅ Driver exists! Size: {stat.st_size} bytes')\n",
    "else:\n",
    "    print(f'❌ Driver not found')\n",
    "    print('📂 Directory contents:')\n",
    "    if os.path.exists('/home/jovyan/eopf-zarr/drivers'):\n",
    "        for f in os.listdir('/home/jovyan/eopf-zarr/drivers'):\n",
    "            print(f'  {f}')\n",
    "    else:\n",
    "        print('  Directory does not exist')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Test GDAL\n",
    "try:\n",
    "    from osgeo import gdal\n",
    "    print(f'✅ GDAL imported successfully')\n",
    "    print(f'📦 GDAL Version: {gdal.VersionInfo()}')\n",
    "    \n",
    "    # Register all drivers\n",
    "    gdal.AllRegister()\n",
    "    print(f'📊 Total drivers: {gdal.GetDriverCount()}')\n",
    "    \n",
    "except ImportError as e:\n",
    "    print(f'❌ GDAL import failed: {e}')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Test EOPF-Zarr driver\n",
    "try:\n",
    "    from osgeo import gdal\n",
    "    \n",
    "    # Look for EOPF-Zarr driver\n",
    "    eopf_driver = gdal.GetDriverByName('EOPFZARR')\n",
    "    \n",
    "    if eopf_driver:\n",
    "        print(f'🎉 SUCCESS! EOPF-Zarr driver found!')\n",
    "        print(f'   Description: {eopf_driver.GetDescription()}')\n",
    "        \n",
    "        # Get metadata\n",
    "        metadata = eopf_driver.GetMetadata()\n",
    "        if metadata:\n",
    "            print(f'   Metadata: {metadata}')\n",
    "    else:\n",
    "        print(f'⚠️ EOPF-Zarr driver not found')\n",
    "        \n",
    "        # Search for any Zarr-related drivers\n",
    "        print(f'🔍 Searching for Zarr drivers...')\n",
    "        zarr_drivers = []\n",
    "        for i in range(gdal.GetDriverCount()):\n",
    "            driver = gdal.GetDriver(i)\n",
    "            desc = driver.GetDescription().lower()\n",
    "            if 'zarr' in desc or 'eopf' in desc:\n",
    "                zarr_drivers.append(driver.GetDescription())\n",
    "        \n",
    "        if zarr_drivers:\n",
    "            print(f'   Found: {zarr_drivers}')\n",
    "        else:\n",
    "            print(f'   No Zarr drivers found')\n",
    "            \n",
    "        # Show first few drivers for reference\n",
    "        print(f'\\n📋 First 10 available drivers:')\n",
    "        for i in range(min(10, gdal.GetDriverCount())):\n",
    "            driver = gdal.GetDriver(i)\n",
    "            print(f'  {i+1}: {driver.GetDescription()}')\n",
    "            \n",
    "except Exception as e:\n",
    "    print(f'❌ Error testing driver: {e}')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Test other packages\n",
    "packages = ['numpy', 'xarray', 'zarr', 'matplotlib', 'rasterio']\n",
    "\n",
    "print('📦 Package versions:')\n",
    "for pkg in packages:\n",
    "    try:\n",
    "        module = __import__(pkg)\n",
    "        version = getattr(module, '__version__', 'unknown')\n",
    "        print(f'  ✅ {pkg}: {version}')\n",
    "    except ImportError:\n",
    "        print(f'  ❌ {pkg}: not available')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Next Steps\n",
    "\n",
    "If the EOPF-Zarr driver was found successfully, you can test it with:\n",
    "\n",
    "```python\n",
    "from osgeo import gdal\n",
    "\n",
    "# Test with a Zarr dataset URL\n",
    "zarr_url = 'EOPFZARR:\"/vsicurl/https://your-zarr-url-here.zarr\"'\n",
    "ds = gdal.Open(zarr_url)\n",
    "if ds:\n",
    "    print(\"Success!\")\n",
    "    print(f\"Size: {ds.RasterXSize} x {ds.RasterYSize}\")\n",
    "    print(f\"Bands: {ds.RasterCount}\")\n",
    "else:\n",
    "    print(\"Failed to open dataset\")\n",
    "```"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {"display_name": "Python 3", "language": "python", "name": "python3"},
  "language_info": {"name": "python", "version": "3.9.0"}
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
EOF

echo "✅ MyBinder EOPF-Zarr setup complete!"
echo "📝 Test notebook: /home/jovyan/test_eopf_driver.ipynb"
echo ""
echo "🎯 To test the installation:"
echo "  1. Open test_eopf_driver.ipynb"
echo "  2. Run all cells to verify driver installation"
echo "  3. If successful, use EOPFZARR:\"path\" syntax with your Zarr URLs"
